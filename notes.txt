HTTP 1.1 vs HTTP 2

HTTP 1.1 :

   => Introduced in 1997 (internet revolution's initial stage)
   => Features : CORS , KEEP ALIVE
   => HTTP 1.1 is Textual
   => HTTP 1.1 is a Standardied protocol 
   => In HTTP 1.1 , Multiple Tcp connection required
   
 HTTP 2 :
   => Introduced in 2015 
   => Features : HPACK , Push frames
   => HTTP 2 is Binary
   => HTTP 2 :A protocol for greater performance
   => In HTTP 2 ,Single secured Tcp connection 

HTTP 1.1 loads resources one after the other,so if one resorce 
         cannot be loaded , it blocks all the other resources
         behind it , in contrast
HTTP 2   uses single Tcp connection to send multiple streams of
         data at once , so that no one resorces blocks by any 
         other resources

HTTP 2 is much faster and more reliable than HTTP 1
HTTP 1 loads a single reuest for every Tcp connection , while
HTTP 2 avoids network delay by using Multiplexing 

------------------------------------------------------------------------------------

Objects and its Internal Representation In JavaScript

  =>  objects in JavaScript may be defined as an unordered collection 
      of related data, of primitive or reference types, in the form
      of “key: value” pairs.

  =>  syntax: An object can be created with figure brackets {…}
     
      let object_name = {
       key_name : value,
       ...
       }

  =>  also , new keyword is used to create object 
      eg: var objectname = new object();

  => Properties of JavaScript Object :
     The property names can be strings or numbers.
     In case the property names are numbers,
     they must be accessed using the “bracket notation”

  =>  Objects are more complex and each object may contain any 
      combination of these primitive data-types as well as reference
      data-types.
  =>  An object, is a reference data type.

  =>  Variables that are assigned a reference value are given a reference 
      or a pointer to that value. That reference or pointer points to the 
      location in memory where the object is stored.
  =>  The variables don’t actually store the value.
